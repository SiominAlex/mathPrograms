package calculator

/*
	Стандартная библиотека, входящая в комплект Go, представляет собой набор пакетов.
	Эти пакеты содержат множество фундаментальных компонентов для современного программного обеспечения.
	Например, пакет fmt содержит базовые функции для форматирования и вывода строк.
	Пакет net/http содержит функции, позволяющие разработчику создавать веб-службы, отправлять и получать данные
	по протоколу http и т. д.
	Чтобы использовать функции пакета, необходимо получить доступ к нему с помощью выражения import.
	Выражение import состоит из ключевого слова import и имени пакета.
*/
import (
	// Импортируем библиотеку для стандартного ввода-вывода
	"fmt"

	// Импортируем библиотеку для работы с ОС
	"os"
)

// Записывает число в переменную с указателем numberPointer с проверкой ошибок при вводе
func inputInt(numberPointer *int) error {
	_, err := fmt.Fscan(os.Stdin, numberPointer)
	if err != nil {
		fmt.Println("Неккоретный ввод, ошибка:", err)
		fmt.Println("Программа завершена, нажмите любую клавишу для выхода")
		fmt.Scanln()
		return err
	}
	return nil
}

const OperationPlus = "+"
const OperationMinus = "-"
const OperationMultiply = "*"
const OperationDivide = "/"

// func - ключевое слово для определения функции (которая что-то делает)
// Основная функция программы - при запуске программа открывает её
func Calculator() {
	// var - ключевое слова для определения переменной (которая что-то хранит и может менять своё значение)
	// Переменная для типа операции
	var operationType = OperationPlus

	// Переменная для Первое число
	var a int
	// Переменная для Второе число
	var b int
	// Переменная для хранения результата
	var result int

	// Выводим приветствие с помощью функции Println из библиотеки fmt
	fmt.Println("Привет! Это программа-калькулятор. Автор: Сёмин Александр.")
	fmt.Println("Введите знак операции (+ - * /):")

	// C помощью функции Fscan мы ожидаем что из Stdin (т.е. ввода пользователя в консоль) мы получим что-то
	// И мы запишем это по адресу, где находится переменная operationType
	// & - означает адрес в оперативной памяти, где хранить значение переменной operationType
	// Этот адрес задается автоматически
	fmt.Fscan(os.Stdin, &operationType)

	// функция Print оставляет курсор на этой же строке, в отличии от Println, которая переносит курсор на след. строку
	fmt.Print("Введите первое число: ")
	if inputInt(&a) != nil {
		return
	}

	fmt.Print("Введите второе число: ")
	if inputInt(&b) != nil {
		return
	}

	switch operationType {
	case OperationPlus:
		result = a + b
	case OperationMinus:
		result = a - b
	case OperationMultiply:
		result = a * b
	case OperationDivide:
		result = a / b
	default:
		fmt.Println("Некорректный тип операции:", operationType)
	}

	fmt.Println("Результат равен:", result)
	fmt.Println("Программа завершена, нажмите любую клавишу для выхода")
	fmt.Scanln()
}
